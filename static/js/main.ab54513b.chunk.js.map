{"version":3,"sources":["components/Card.js","components/NewCardForm.js","components/Board.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","props","className","text","emoji","getUnicode","onClick","onClickCallback","id","EMOJI_LIST","NewCardForm","useState","formFields","setFormFields","onInputChange","event","newFormFild","target","name","value","onSubmit","preventDefault","onSubmitCallback","onChange","type","Board","API_CARD_URL","url","bordName","cardList","setCardList","message","setMessage","deleteCard","newCardList","filter","card","length","axios","delete","then","response","console","log","catch","error","useEffect","get","apiCardList","data","cardComponents","map","key","post","newCard","push","App","boardName","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.ab54513b.chunk.js","sourcesContent":["import React, { } from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\nimport './Card.css';\n\nconst Card = (props) => {\n  return (\n    <div className=\"card\">\n      <section className=\"card__content\">\n        <p className=\"card__content-text\">{props.text}</p>\n        {props.emoji?<p className=\"card__content-emoji\">{emoji.getUnicode(props.emoji)}</p> : \"\"}\n      </section>\n      <button className=\"card__delete\" onClick = {() => props.onClickCallback(props.id)}>Delete</button>\n    </div>\n  )\n}\n\nCard.propTypes = {\n  text: PropTypes.string,\n  emoji: PropTypes.string\n};\n\nexport default Card;\n","import React, { useState} from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\nimport './NewCardForm.css';\n\nconst EMOJI_LIST = [\"\", \"heart_eyes\", \"beer\", \"clap\", \"sparkling_heart\", \"heart_eyes_cat\", \"dog\"]\n\nconst NewCardForm = (props) => {\n  const [formFields, setFormFields] = useState({\n    text: \"\",\n    emoji: \"\",\n  })\n\n  const onInputChange = (event) => {\n    const newFormFild = {...formFields}\n    newFormFild[event.target.name] = event.target.value\n    setFormFields(newFormFild)\n  }\n\n  const onFormSubmit = (event) =>{\n    event.preventDefault()\n\n    props.onSubmitCallback(formFields)\n    setFormFields({\n      text: \"\",\n      emoji: \"\",\n    })\n  }\n\n  return(\n    <form className=\"new-card-form\" onSubmit={onFormSubmit} >\n      <div className =\"new-card-form__header\">\n        <label className=\"new-card-form__form-label\">Input your message</label>\n        <input className = \"new-card-form__form-textarea\" \n          name=\"text\"\n          value={formFields.text}\n          onChange = {onInputChange}\n          type=\"text\"\n        \n        />\n      </div>\n      <div className =\"new-card-form__header\">\n          <p>\n             <label className=\"new-card-form__form-select\">Select Emoji</label>\n             <select className=\"new-card-form__form-select\" name = \"emoji\" onChange ={onInputChange}>\n               <option value = {EMOJI_LIST[0]}>{emoji.getUnicode(EMOJI_LIST[0])}</option>\n               <option value = {EMOJI_LIST[1]}>{emoji.getUnicode(EMOJI_LIST[1])}</option>\n               <option value = {EMOJI_LIST[2]}>{emoji.getUnicode(EMOJI_LIST[2])}</option>\n               <option value = {EMOJI_LIST[3]}>{emoji.getUnicode(EMOJI_LIST[3])}</option>\n               <option value = {EMOJI_LIST[4]}>{emoji.getUnicode(EMOJI_LIST[4])}</option>\n               <option value = {EMOJI_LIST[5]}>{emoji.getUnicode(EMOJI_LIST[5])}</option>\n               <option value = {EMOJI_LIST[6]}>{emoji.getUnicode(EMOJI_LIST[6])}</option>\n             </select>\n          </p>\n      </div>\n      <div>\n        <button className=\"new-card-form__form-button\">Add Card</button>\n      </div>\n  </form>\n  )\n} \n\nNewCardForm.propTypes = {\n  onSubmitCallback: PropTypes.func.isRequired,\n};\n\nexport default NewCardForm;\n","import React, { useState,  useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport './Board.css';\nimport Card from './Card';\nimport NewCardForm from './NewCardForm';\n\nconst Board = (props) => { \n  const API_CARD_URL = `${props.url}${props.bordName}/cards`\n  const [cardList, setCardList] = useState([])\n  const [message, setMessage] = useState(null);\n\n  const deleteCard = (id) => {\n    const newCardList = cardList.filter((card) => {\n      return card.card.id !== id;\n    });\n\n    if (newCardList.length < cardList.length) {\n      axios.delete(`https://inspiration-board.herokuapp.com/cards/${ id }`)\n        .then((response) => {\n          setMessage(`Card ${ id } deleted`);\n          console.log(message)\n        })\n        .catch((error) => {\n          setMessage(`Unable to delete card ${ id }`);\n          console.log(message)\n        })\n      setCardList(newCardList);\n    }\n  }\n\n  const addCard = (card) => {\n    const newCardList = [...cardList]\n\n    axios.post(API_CARD_URL, card)\n    .then((response) => {\n      const newCard= response.data;\n      newCardList.push({\n        card: {\n          id: newCard.card.id,\n          text: card.text,\n          emoji: card.emoji\n        }\n      });\n      setCardList(newCardList);\n    })\n    .catch((error) => {\n      setMessage(error.message);\n      console.log(error.message);\n    });\n  }\n\n  useEffect(()=>{\n    axios.get(API_CARD_URL)\n      .then((response) => {\n        const apiCardList = response.data;\n        setCardList(apiCardList);\n      })\n      .catch((error) => {\n        setMessage(error.message);\n        console.log(error.message);\n      });\n  }, [API_CARD_URL])\n\n  const cardComponents = cardList.map((card) => {\n    return(\n      <Card\n        key = {card.card.id}\n        id = {card.card.id}\n        text = {card.card.text}\n        emoji = {card.card.emoji}\n        onClickCallback = {deleteCard}\n      />\n    )\n  })\n\n  return (\n    <div className=\"board\">\n      {cardComponents}\n      <NewCardForm onSubmitCallback ={addCard}/>\n    </div>\n  )\n};\n\nBoard.propTypes = {\n  url: PropTypes.string.isRequired,\n  boardName: PropTypes.string.isRequired,\n  cards: PropTypes.arrayOf(\n    PropTypes.shape({\n      card: PropTypes.shape({\n        id: PropTypes.integer,\n        text: PropTypes.string,\n        emoji: PropTypes.string\n      })\n    })\n  )\n};\n\nexport default Board;\n","import React from 'react';\nimport './App.css';\nimport Board from './components/Board';\n\nconst App = () => {\n \n  return (\n    <section>\n      <header className=\"header\">\n        <h1 className=\"header__h1\"><span className=\"header__text\">Inspiration Board</span></h1>\n      </header>\n      <Board\n        url=\"https://inspiration-board.herokuapp.com/boards/\"\n        boardName={`Jeta-Yieni`}\n      />\n    </section>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}